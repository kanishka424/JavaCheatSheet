1.creating a thread(1st video)

ANONYMOUS-
Thread thread1=new Thread((new Runnable(){
		@Override
		public void run(){
		sout("printing from lambda")
		}).start();



LAMBDA-
Thread thread1=new Thread(()->sout("printing from runnable"))
				.start()

NOTE
compiler knows the thread has a constructor which takes in a runnable interface
and there is only one unimplemented method(a functional interface),which is "run()" here



2.COMPARATOR interface lambda (2nd video)

ANOYMOUS-
COllections.sort(employees,new Comparator(){
				@Override
				public int compare(Empolyee emp1,Employee2 emp2){
				return emp1.getName().compareTo(emp2.getName())

				}	
				}
				

LAMDA-
COllections.sort(employees,(Employee emp1,Employee emp2 )->{
				emp1.getName().compareTo(emp2.getName())
				}


NOTE
1.this can be further simplifeid ,we doesn't need to provide types to lamda fucntions because "employees"(the first parameter tells it to compiler)


LAMDA (simplifed)-
COllections.sort(employees,(emp1, emp2 )->{
				emp1.getName().compareTo(emp2.getName())
				}


2.we can assign a lamda expression to a varible and use
empComparator=(emp1, emp2 )->{emp1.getName().compareTo(emp2.getName())}

Collections.sort(employees,empComparator}
				}




3.(third video)


we can assign a lamda expression to a varible and use


class AnotherClass{
 public String doSomething(){
UpperConcat uc=(s1.s2)->{
sout("The lamda expressions calss is"+getClass().getSimpleName());//this prints "AnotherClass"
String result=s1.toUpperCase()+s2.toUpperCase();
retrn result;
}

sout("The AnotherClass name is"+getClass().getSimpleName());
retur Main.doStringStuff(uc,"String1","String2");
}


interface UpperConcat {
    public String upperAndConcat(String s1, String s2);
}


Note 
1.why does lamda expression prints "AnotherClass" for class name?
lamda expression isn't a class hen the code runs an anonymus instance isn't 
created instead the lambda is created like a nested block of code it shares 
the same scope as nested scope.
2.when we print the class name inside an anonymous class it won't print anything
(see video for further)
3.Why we can't use local varibles defined outside in an anonymous class to do so we need to declare it as final?video 3 /time-12.00
there is a bit of theory involved in point 3 should look



4.fourth video

how local variables are treated by lamdas


      for(Employee employee : employees) {
           System.out.println(employee.getName());
           System.out.println(employee.getAge());
       }

        System.out.println("******************");

        Employee employee;

       for(int i=0; i<employees.size(); i++) {
            employee = employees.get(i);
            System.out.println(employee.getName());
           new Thread(() -> System.out.println(employee.getAge())).start();



*the first varible works since employee varible is decalred inside loop and for each iteration it wont change
but the second loop won't since employee varible decalared outside we are chaning the value in lamda



5.fifth video

*Consumer interface-Accepts a parameter and do some action but doesnt return anything
(this is also a functional interface)

*employees is an Arraylist

employees.forEach(employee->{
			sout(employee.getName());
			sout(employee.getAge());
			});

we have passed a Consumer class to forEach() the ArrayList.forEach() is introduced in java 8


*Predicate interface
accepts an argument and return "false" or "true" 
this is also a functional interface and the method we implement is test()
We are evaluating if conditions,etc..


this can'tbe used with list.forEach() beacause it expects a Consumer interface

privste static void printEmployees(List<Employee> employees,
					String ageText,
					Predicate<Employee> ageCondition){
					
					sout(ageText);
					for(Employee employee:employees){
					if(ageCondition.test(employee)){
					sout(employee.getName();

					}
				}


		}





printEmployees(employees,"Employee over 30",employee->employee.getAge()>30);

printEmployees(employees,"Employee over 30 and under ",employee->employee.getAge()<=30);






6.sixth video mor on predicates contd.....

We can replace  lamda with anonymous class also

printEmployees(employees,"Employee less than 25  ",new Predicate<Employee>(){
								@Override
								public boolean test(Employee employee){
									return employee.getAge()<25;
									}
								})


			there are also non-generic interfaces

1.IntPredicate

IntPredicate intp=i-> i > 15;
sout(intp.test(10))//this wiil return "false"



we can chain Predicates together



IntPredicate greterThan15= i -> i >15;
IntPredicate lessThan100=i -> i < 100;




****sout(greterThan15.and(lessThan100).test(50)) //this returns true
//and() is important here
//and() is a default method

***
	or()
	and()
	negate()
	methods can be chained together
 




*Supplier Interface//should study easy
doesnt take argument but returns value


Random random=new Random();
Supplier<Integer> randomSupplier =()->random.nextInt(1000);
for (int i=0;i<0;i++){
sout(randomSupplier.get());
}



7.7th video, Function

**Intrface Function <T,R>

T-the type of the input to the function
R-the type of the result of the function

*This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference.
apply() is the unimplmented method()

public interface Function<T,R>
Represents a function that accepts one argument and produces a result.
This is a functional interface whose functional method is apply(Object).


*Represents a function that accepts one argument and produces a result.


Intrface Function useful with call backs watch 10.40 of video


e.g-1.(SIMPLER EXAMPLE)

Function <Employee,String> getLastName=(Employee employee)->{//THE FUNCTIONAL INTERFACE WITH LAMBDA
 return employee.getName().subString(employee.getName().indexOf(' ')+1);
}


getLastName.apply(employees.get(1))//HOW TO USE IT


e.g2.(Long but EAASY)

Function <Employee,String> getLastName=(Employee employee)->{//THE FUNCTIONAL INTERFACE 1 WITH LAMBDA
 return employee.getName().subString(employee.getName().indexOf(' ')+1);
}

Function <Employee,String> getFirstName=(Employee employee)->{//THE FUNCTIONAL INTERFACE 2 WITH LAMBDA
 return employee.getName().subString(0,employee.getName().indexOf(' '));
}


Random random=new Random();
for(Employee emp:employees){
	for(Employee employee: employees){
	if(random1.nextBoolean()){
	sout(getAName(getFirstName,employee));
	}else{
	sout(getAName(getLastName,employee));
	}
	}

}



private static String getName(Function<Employee,String> getName,Employee employee){//this is just a static method to call the lambda function (not inteerfaces beacuse we used lambda)
 	retrun getName.apply(employee);
}





WHEN USING LAMDA WE CAN RUN THE CODE WITHOUT CREATEING A AN INTERFACE AND A CLASS THAT IMPLEMENTS 


8. Chaining functions

**andThen()

Function<Employee,String> upperCase=employee->employee.getName().toUpperCase();

Function<String,String> firstName=name->name.subString(0,name.indexOf(' '));
Function chainedFunction=upperCase.andThen(firstName);

chainedFunction.apply(employee.get(0));



****compose()==OPPOSITE of "andThen()"


If we want to concate firstName and age can we chain?no because the function interface only accepts one argument

****so we need to use BiFunction  Interface
which can take two arguments 

e.g-BiFunction <String,Employee,String> concateAge=(String name,Employee employee)
							->{
								return name.concate(" "+employee.getName())



we can't chain BiFunction interfaces because because BiFunction expects two arguments
and when we chain the function result of one function becomes the argument to other  function 

BUT BiFunction interface can be at the begining of  chain using it's andThen()

and also BiFunction doesnt have compose()

so insted of chaining we have to upperCase and concate in two steps

e.g-

String upperName=upperCase.apply
				(employees.get(0))

sout(concateAge.apply(upperName,employee.get(0))



UNARY OPERATOR INTERFACE
accepts one parameter of a specific type and returns the same type of result
LongUnaryOperator accepts Long and returns Long value

This extends Function interface SO they can be CHAINED together like Function interfaces

e.g:-

IntUnaryOperator incBy5= i -> i+5;
sout(incBy5.applyAsInt(10)); 




*WATCH THE SUMMARY OF FUNCTION PACKAGE INTERFACES

Consumer can also be chained but no use


check the documentaion







9.Streams 












